1. 깃 소개
    1) 리눅스 토발즈(리눅스 창시자-1991년 취미로 개발)가 깃 개발
        -Bitkeeper의 불편함과 상용화에 따라 깃 개발을 하게 됨
        -불과 2주만에 개발
        -2005년 Git 탄생
    2) 목적
        -커뮤니케이션
        -협업(Cooperation)
            -돈이 걸린, 프로로서 일하는 개발자, 퍼블리셔와 협업

2. GitHub
    1) 프로젝트 호스트(host) 사이트
    2) Git을 기반
    3) Git을 보다 쉽게 관리해 줄 수 있는 웹 콘솔이 필요해 만들어짐
    4) 2008년 2월 서비스 시작

3. VCS
    1) Version Control System
        -버전관리
        -한마디로 파일의 타임머신
        -파일의 변화를 기록(변경점 관리)
        -복구, 특정 시점의 파일을 가져옴
        -수정된 내용을 비교 가능함
        -추적이 가능함
    2) Source Control System
    3) 프로젝트의 진행 상황을 저장
        -데이터의 과거와 현재 상태를 관리하는 것
    4) 복수의 사람들이 사용하는 것임
    5) 협업시 서로 간에 상태를 똑같게 유지하는 기능

4. Git 
    1) 동시 다발적인 브랜치(branch) 작업
    2) Git 만들기 시작한지 3일만에 Git 자체의 버전 관리 시작함
        -2주 무렵 처음으로 복수의 브랜치(branch)를 한 번에 병합(merge)하기 시작하면서 완성됨
    3) 대중성, 검증된 안정성!
    4) DVCS
        -Distributed Version Control System
        -분산 버전 관리 시스템
        -클라이언트 각자가 온전한 전체 저장소 사본을 로컬에 가짐
        -로컬에서 명령 실행
            -대부분의 명령은 다른 서버가 필요하지 않음
            -모든 히스토리가 로컬 저장소에 존재
            -오프라인 상태 
    5) 사실상 업계 표준

5. 버전관리 도구 형태
    1) 중앙 집중식
        -CVS
        -Subversion
    2) 분산
        -Git

6. Git 기본 용어
    1) main
        -깃의 기본 브랜치 
    2) origin(=remote(원격))
        -깃의 기본 원격 브랜치 별칭
    3) HEAD
        -현재 작업 브랜치의 위치
        -현재 작업 중인 커밋        
        -커밋이 많아지면 어디에 위치하고 있는지 포인터가 필요 
    4) checkout
        -작업할 브랜치 지정, 헤드의 위치를 변경
        -현재 작업 브랜치의 HEAD 위치를 변경 

7. Git 설정 명령
    1) git config [설정키] [설정값] : 해당 깃 저장소의 설정
       git config user.name earth
       git config user.email earth@gmail.com 
    2) git config --global [설정키] [설정값] : 모든 깃 저장소에 해당하는 설정 
       git config user.name earth
       git config user.email earth@gmail.com 

8. 3단계 개념
    1) 워킹 디렉토리
        -Working Directory(작업 디렉토리)
        -현재 깃으로 버전 관리를 시작한 폴더(프로젝트)
    2) stagine area(스테이징 영역)
        -단순한 파일을 지칭, 커밋할 파일의 정보 저장(Index)
        -깃에서 커밋(저장)을 하기 전에 준비해 둔 영역
    3) Git 디렉토리(Local Repository)
        -프로젝트의 메타 정보, 객체 DB 
        -깃 저장소 

9. Git 버전관리 흐름
    1) Modified
        -수정한 파일을 아직 로컬 DB에 커밋하지 않은 것
    2) Staged
        -현재 수정한 파일(들)을 곧 커밋
    3) Committed
        -로컬 Git DB에 안전하게 저장 

10. Git 기본 버전 관리 명령어
    1) git init
        -깃 저장소(Repository) 생성
    2) git help [명령어]
        -명령어 도움말 보기
    3) git status
        -깃 버전 관리 상테 확인(작업 디렉토리에 있는 파일들이 git의 track을 받고 있는지 아닌지를 알려줌)
    4) git add
        -버전 관리 팡리 준비
        -git add <파일명> ...
            -특정 파일을 버전 관리 준비(스테이징 영역)
        -git add .
            -해당 디렉토리의 모든 파일에 대해 버전 관리 준비(스테이징 영역)
    5) git rm --cached [파일명]
        -실수로 추가한 파일의 버전 관리 안하기(track상태를 untrack 상태로 변경)
    6) git reset --soft 파일이름 
        -Staging Area에서 삭제
        -마지막 커밋을 되돌리기 
    7) git log(버전 관리 이력 확인)
        -자세한 로그 출력
        -커밋 아이디가 길게 나옴
       git log --oneline
        -간략한 로그 출력
        -커밋 아이디가 짧게 나옴(7자리)
       git shortlog
        -아주 간략한 로그 출력
        -커밋 아이디 안나옴
       git show 커밋ID
        -특정 커밋의 상세정보 출력
       git show HEAD 
        -최근 커밋에 대한 상세 정보 출력
       git log -숫자
        -숫자 개수만큼 로그 보기
       git log --pretty=oneline
        -깃 커밋 로그를 한줄로 보기
    8) git commit
        -버전 관리 저장(스냅샷, 해시(아이디) 생성)
            -체크섬으로 데이터를 관리, 40자 길이의 16진수 문자열(체크섬)
            -SHA-1 해시
            -모든 것을 해시로 식별
            -커밋=해시=스냅샷
        -변경된 파일을 저장소에 제출
        -변경된 사항을 스냅샷으로 저장
        -'의미'를 가질 수 있게되는 기본적인(atomic) 최소한의 단위
       git commit -m "메시지"
        -깃 커밋하면서 메세지 저장 
       git commit --amend
        -최근 커밋의 내역 확인
        -아무것도 변경하지 않더라도 커밋 ID가 달라짐
        -커밋 메세지 수정 가능
       git revert HEAD 
        -최근 커밋을 취소하는 새로운 커밋 생성
        -마지막 커밋을 되돌리면서 커밋 생성(최근 커밋의 반대)
       git reset HEAD^
        -마지막 커밋을 스테이징하기 전 상태로 작업 디렉토리로 되돌리기
    9) git branch 
        -로컬 브랜치 보기
       git branch [브랜치명 or 커밋의 해시(체크섬)]
        -로컬 브랜치 만들기
       git branch -d [브랜치명]
        -해당 브랜치 삭제하기 
       git checkout [브랜치명]
        -브랜치를 체크아웃하기(작업 영역 변경)
            -git checkout main 
            -git checkout f473a7f 
       git checkout -b [브랜치명]
        -브랜치를 만들면서 체크아웃하기 
       git merge [브랜치명]
        -현재 checkout되어있는 브랜치에 입력한 브랜치명을 merge함
    10) git 원격 저장소 관련 명령
        -포크(Fork)
            -다른사람의 원격 저장소를 내 계정으로 복사
            -자유롭게 파일 생성, 수정 반영이 가능함
        -git clone "원격저장소 주소"
            -원격 저장소를 로컬에 복제하기 
        -git remote -v
            -원격 저장소 정보 보기
        -git remote add "원격저장소 별칭" "원격저장소 주소"
        -git push [원격저장소] [원격브랜치]
            -원격저장소로 내용을 밀어넣기
            -git push origin --all  
                -로컬의 모든 브랜치를 푸시하는 것임

11. 상대참조 연산자
    1) 상대참조 
        -깃은 커밋 단위를 해시로 관리
        -사람이 알아보기 힘듦
        -상대적인 참조 제공
            -^(캐럿)
            -~(틸드)
    2) 상대참조 연산자
        -^(캐럿)
            -부모 커밋을 나타내는 기호
            -캐럿 1개(^): 바로 1단게 부모 커밋
            -캐럿 2개(^^): 바로 2단게 부모 커밋 
        -~(틸드)
            -주어진 숫자만큼 상위 커밋으로 헤드 포인터 이동
            -~1: 1단계 부모 커밋
            -~2: 2단계 부모 커밋 

12. 브랜치(Branch)
    1) 독립적인 작업 공간
    2) Git 버전관리 시작 => 메인 브랜치(main)
    3) 메인 브랜치는 기본 브랜치 

13. .gitignore
    1) 추적이 불필요한 파일들 
        -각종 로그 파일들
        -IDE 프로젝트 자체 관리 파일들 
        -입, 출력용 파일들 
    2) 깃에서 무시할 파일, 디렉토리 관리하는 방법

14. 여러 사람과 협업
    1) 빈 원격 저장소 생성
    2) 협업 책임지는 사람이 기본 프로젝트 구조 만들기
        -최소한의 뼈대 프로젝트 생성
    3) 협업하는 팀구성원 모두가 원격 저장소를 클론
    4) 본인이 해야하는 작업 진행
